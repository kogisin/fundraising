// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fundraising/fundraising.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionType enumerates the valid types of an auction.
type AuctionType int32

const (
	// AUCTION_TYPE_UNSPECIFIED defines the default auction type
	AuctionTypeNil AuctionType = 0
	// AUCTION_TYPE_FIXED_PRICE defines the fixed price auction type
	AuctionTypeFixedPrice AuctionType = 1
	// AUCTION_TYPE_ENGLISH defines the english auction type
	AuctionTypeEnglish AuctionType = 2
)

var AuctionType_name = map[int32]string{
	0: "AUCTION_TYPE_UNSPECIFIED",
	1: "AUCTION_TYPE_FIXED_PRICE",
	2: "AUCTION_TYPE_ENGLISH",
}

var AuctionType_value = map[string]int32{
	"AUCTION_TYPE_UNSPECIFIED": 0,
	"AUCTION_TYPE_FIXED_PRICE": 1,
	"AUCTION_TYPE_ENGLISH":     2,
}

func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}

func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{0}
}

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatusNil AuctionStatus = 0
	// AUCTION_STATUS_STANDBY defines the standby auction status
	AuctionStatusStandBy AuctionStatus = 1
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatusStarted AuctionStatus = 2
	// AUCTION_STATUS_VESTING defines the vesting auction status
	AuctionStatusVesting AuctionStatus = 3
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatusFinished AuctionStatus = 4
	// AUCTION_STATUS_CANCELLED defines the cancelled auction status
	AuctionStatusCancelled AuctionStatus = 5
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_STANDBY",
	2: "AUCTION_STATUS_STARTED",
	3: "AUCTION_STATUS_VESTING",
	4: "AUCTION_STATUS_FINISHED",
	5: "AUCTION_STATUS_CANCELLED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_STANDBY":     1,
	"AUCTION_STATUS_STARTED":     2,
	"AUCTION_STATUS_VESTING":     3,
	"AUCTION_STATUS_FINISHED":    4,
	"AUCTION_STATUS_CANCELLED":   5,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{1}
}

// Params defines the set of params for the fundraising module.
type Params struct {
	// fundraising_creation_fee specifies the fee for fundraisin creation fee.
	// this prevents from spamming attack and it is collected in the community
	// pool
	FundraisingCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=fundraising_creation_fee,json=fundraisingCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fundraising_creation_fee"`
	// extended_period specifies the extended period that determines how long
	// the extended auction round lasts.
	ExtendedPeriod uint32 `protobuf:"varint,2,opt,name=extended_period,json=extendedPeriod,proto3" json:"extended_period,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFundraisingCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FundraisingCreationFee
	}
	return nil
}

func (m *Params) GetExtendedPeriod() uint32 {
	if m != nil {
		return m.ExtendedPeriod
	}
	return 0
}

// BaseAuction defines a base auction type. It contains all the necessary fields
// for basic auction functionality. Any custom auction type should extend this
// type for additional functionality (e.g. english auction, fixed price
// auction).
type BaseAuction struct {
	// id specifies index of the auction
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// type specifies the auction type; type 1 is fixed price and 2 is english
	Type AuctionType `protobuf:"varint,2,opt,name=type,proto3,enum=tendermint.fundraising.AuctionType" json:"type,omitempty"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,3,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// selling_pool_address specifies the bech32-encoded address that has all the
	// selling coin
	SellingPoolAddress string `protobuf:"bytes,4,opt,name=selling_pool_address,json=sellingPoolAddress,proto3" json:"selling_pool_address,omitempty"`
	// paying_pool_address specifies the bech32-encoded address that has all the
	// paying coin
	PayingPoolAddress string `protobuf:"bytes,5,opt,name=paying_pool_address,json=payingPoolAddress,proto3" json:"paying_pool_address,omitempty"`
	// start_price specifies the starting price of the auction
	StartPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=start_price,json=startPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"start_price"`
	// selling_coin specifies the selling coin for the auction
	SellingCoin types.Coin `protobuf:"bytes,7,opt,name=selling_coin,json=sellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"selling_coin"`
	// paying_coin_denom specifies the paying coin denom that bidders use to bid
	// for
	PayingCoinDenom string `protobuf:"bytes,8,opt,name=paying_coin_denom,json=payingCoinDenom,proto3" json:"paying_coin_denom,omitempty"`
	// vesting_address specifies the bech32-encoded vesting address that holds
	// vesting amounts of coin
	VestingAddress string `protobuf:"bytes,9,opt,name=vesting_address,json=vestingAddress,proto3" json:"vesting_address,omitempty"`
	// vesting_schedules specifies the vesting schedules for the auction
	VestingSchedules []VestingSchedule `protobuf:"bytes,10,rep,name=vesting_schedules,json=vestingSchedules,proto3" json:"vesting_schedules"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,12,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// status specifies the auction status
	Status AuctionStatus `protobuf:"varint,13,opt,name=status,proto3,enum=tendermint.fundraising.AuctionStatus" json:"status,omitempty"`
}

func (m *BaseAuction) Reset()         { *m = BaseAuction{} }
func (m *BaseAuction) String() string { return proto.CompactTextString(m) }
func (*BaseAuction) ProtoMessage()    {}
func (*BaseAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{1}
}
func (m *BaseAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseAuction.Merge(m, src)
}
func (m *BaseAuction) XXX_Size() int {
	return m.Size()
}
func (m *BaseAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseAuction.DiscardUnknown(m)
}

var xxx_messageInfo_BaseAuction proto.InternalMessageInfo

// FixedPriceAuction defines the fixed price auction type. It is the most
// simpliest way to raise funds. An auctioneer sets the starting price for each
// selling amounts of coin and bidders bid to purchase based on the fixed price.
type FixedPriceAuction struct {
	*BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction,omitempty"`
}

func (m *FixedPriceAuction) Reset()         { *m = FixedPriceAuction{} }
func (m *FixedPriceAuction) String() string { return proto.CompactTextString(m) }
func (*FixedPriceAuction) ProtoMessage()    {}
func (*FixedPriceAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{2}
}
func (m *FixedPriceAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedPriceAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedPriceAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedPriceAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedPriceAuction.Merge(m, src)
}
func (m *FixedPriceAuction) XXX_Size() int {
	return m.Size()
}
func (m *FixedPriceAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedPriceAuction.DiscardUnknown(m)
}

var xxx_messageInfo_FixedPriceAuction proto.InternalMessageInfo

// EnglishAuction defines the english auction type. It is an ascending dynamic
// auction that an auctioneer decides the starting price of the selling amount
// of coin and bidders bid to purchase the amounts of coin. It creates
// competition for the price, not how fast bidders can bid.
type EnglishAuction struct {
	*BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction,omitempty"`
	// maximum_bid_price specifies the maximum bid price for the auction
	MaximumBidPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=maximum_bid_price,json=maximumBidPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_bid_price"`
	// extended specifies a number of extended rounds
	Extended uint32 `protobuf:"varint,3,opt,name=extended,proto3" json:"extended,omitempty"`
	// extend_rate specifies the rate that decides if the auction needs another
	// round
	ExtendRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=extend_rate,json=extendRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"extend_rate"`
}

func (m *EnglishAuction) Reset()         { *m = EnglishAuction{} }
func (m *EnglishAuction) String() string { return proto.CompactTextString(m) }
func (*EnglishAuction) ProtoMessage()    {}
func (*EnglishAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{3}
}
func (m *EnglishAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnglishAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnglishAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnglishAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnglishAuction.Merge(m, src)
}
func (m *EnglishAuction) XXX_Size() int {
	return m.Size()
}
func (m *EnglishAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_EnglishAuction.DiscardUnknown(m)
}

var xxx_messageInfo_EnglishAuction proto.InternalMessageInfo

// AuctionMetadata defines the metadata for the auction
type AuctionMetadata struct {
	// auction_id specifes the id of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// winning_price specifies the winning price of the auction
	WinningPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=winning_price,json=winningPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"winning_price"`
	// total_selling_coin specifes the total amount of coin that is sold when the
	// auction is finished
	TotalSellingCoin types.Coin `protobuf:"bytes,3,opt,name=total_selling_coin,json=totalSellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_selling_coin"`
}

func (m *AuctionMetadata) Reset()         { *m = AuctionMetadata{} }
func (m *AuctionMetadata) String() string { return proto.CompactTextString(m) }
func (*AuctionMetadata) ProtoMessage()    {}
func (*AuctionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{4}
}
func (m *AuctionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionMetadata.Merge(m, src)
}
func (m *AuctionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AuctionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionMetadata proto.InternalMessageInfo

func (m *AuctionMetadata) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *AuctionMetadata) GetTotalSellingCoin() types.Coin {
	if m != nil {
		return m.TotalSellingCoin
	}
	return types.Coin{}
}

// VestingSchedule defines the vesting schedule for the owner of an auction.
type VestingSchedule struct {
	// time specifies the vesting time
	Time time.Time `protobuf:"bytes,1,opt,name=time,proto3,stdtime" json:"time"`
	// weight specifies the vesting weight for the schedule
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
}

func (m *VestingSchedule) Reset()         { *m = VestingSchedule{} }
func (m *VestingSchedule) String() string { return proto.CompactTextString(m) }
func (*VestingSchedule) ProtoMessage()    {}
func (*VestingSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{5}
}
func (m *VestingSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingSchedule.Merge(m, src)
}
func (m *VestingSchedule) XXX_Size() int {
	return m.Size()
}
func (m *VestingSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_VestingSchedule proto.InternalMessageInfo

func (m *VestingSchedule) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

// VestingQueue defines the vesting queue.
type VestingQueue struct {
	// auction_id specifes the id of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,2,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// paying_coin specifies the paying amount of coin
	PayingCoin types.Coin `protobuf:"bytes,3,opt,name=paying_coin,json=payingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"paying_coin"`
	// time specifies the timestamp of the vesting schedule
	Time time.Time `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *VestingQueue) Reset()         { *m = VestingQueue{} }
func (m *VestingQueue) String() string { return proto.CompactTextString(m) }
func (*VestingQueue) ProtoMessage()    {}
func (*VestingQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{6}
}
func (m *VestingQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingQueue.Merge(m, src)
}
func (m *VestingQueue) XXX_Size() int {
	return m.Size()
}
func (m *VestingQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingQueue.DiscardUnknown(m)
}

var xxx_messageInfo_VestingQueue proto.InternalMessageInfo

func (m *VestingQueue) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *VestingQueue) GetAuctioneer() string {
	if m != nil {
		return m.Auctioneer
	}
	return ""
}

func (m *VestingQueue) GetPayingCoin() types.Coin {
	if m != nil {
		return m.PayingCoin
	}
	return types.Coin{}
}

func (m *VestingQueue) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

// Bid defines a standard bid for an auction.
type Bid struct {
	// auction_id specifies the id of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// sequence specifies a number to track first come first served based auction
	// type
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// bidder specifies the bech32-encoded address that bids for the auction
	Bidder string `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// price specifies the increasing bid price is only possible
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// coin specifies the paying amount of coin that the bidder bids
	Coin types.Coin `protobuf:"bytes,5,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
	// height specifies the block height of the bid
	Height uint64 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// isWinner specifies the bid that is determined to be a winner when an
	// auction ends; default value is false
	IsWinner bool `protobuf:"varint,7,opt,name=isWinner,proto3" json:"isWinner,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{7}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *Bid) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Bid) GetIsWinner() bool {
	if m != nil {
		return m.IsWinner
	}
	return false
}

func init() {
	proto.RegisterEnum("tendermint.fundraising.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterEnum("tendermint.fundraising.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterType((*Params)(nil), "tendermint.fundraising.Params")
	proto.RegisterType((*BaseAuction)(nil), "tendermint.fundraising.BaseAuction")
	proto.RegisterType((*FixedPriceAuction)(nil), "tendermint.fundraising.FixedPriceAuction")
	proto.RegisterType((*EnglishAuction)(nil), "tendermint.fundraising.EnglishAuction")
	proto.RegisterType((*AuctionMetadata)(nil), "tendermint.fundraising.AuctionMetadata")
	proto.RegisterType((*VestingSchedule)(nil), "tendermint.fundraising.VestingSchedule")
	proto.RegisterType((*VestingQueue)(nil), "tendermint.fundraising.VestingQueue")
	proto.RegisterType((*Bid)(nil), "tendermint.fundraising.Bid")
}

func init() { proto.RegisterFile("fundraising/fundraising.proto", fileDescriptor_a97a388085f27061) }

var fileDescriptor_a97a388085f27061 = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xf7, 0x3a, 0x1b, 0xe3, 0x8c, 0x13, 0x67, 0x99, 0x6f, 0xbe, 0xee, 0xb2, 0x12, 0xb6, 0xe5,
	0xaa, 0x25, 0x42, 0x62, 0x0d, 0x94, 0x16, 0x84, 0x54, 0x55, 0xfe, 0xb1, 0x06, 0x4b, 0xa9, 0x71,
	0x77, 0x0d, 0x2d, 0x1c, 0xba, 0x5a, 0x7b, 0x06, 0x7b, 0x84, 0xbd, 0xeb, 0xee, 0xac, 0x21, 0xf9,
	0x03, 0x2a, 0x21, 0x9f, 0x90, 0x7a, 0xe9, 0xc5, 0x52, 0xa4, 0xde, 0x2a, 0x55, 0xaa, 0xaa, 0xfe,
	0x07, 0xbd, 0x70, 0x44, 0x3d, 0x55, 0x3d, 0x40, 0x95, 0x5c, 0xfa, 0x07, 0xf4, 0xde, 0x6a, 0x66,
	0xc7, 0xf6, 0x3a, 0x84, 0x86, 0xa4, 0x70, 0xca, 0xbe, 0x37, 0xef, 0xf3, 0x66, 0xe6, 0xf3, 0xde,
	0xe7, 0x8d, 0x03, 0xce, 0xde, 0x1f, 0xb9, 0xc8, 0x77, 0x08, 0x25, 0x6e, 0xb7, 0x18, 0xf9, 0xd6,
	0x87, 0xbe, 0x17, 0x78, 0x30, 0x13, 0x60, 0x17, 0x61, 0x7f, 0x40, 0xdc, 0x40, 0x8f, 0xac, 0x6a,
	0xd9, 0x8e, 0x47, 0x07, 0x1e, 0x2d, 0xb6, 0x1d, 0x8a, 0x8b, 0x0f, 0x2f, 0xb5, 0x71, 0xe0, 0x5c,
	0x2a, 0x76, 0x3c, 0xe2, 0x86, 0x38, 0xed, 0x4c, 0xb8, 0x6e, 0x73, 0xab, 0x18, 0x1a, 0x62, 0x69,
	0xa3, 0xeb, 0x75, 0xbd, 0xd0, 0xcf, 0xbe, 0x84, 0x37, 0xd7, 0xf5, 0xbc, 0x6e, 0x1f, 0x17, 0xb9,
	0xd5, 0x1e, 0xdd, 0x2f, 0x06, 0x64, 0x80, 0x69, 0xe0, 0x0c, 0x86, 0x61, 0x40, 0xe1, 0x17, 0x09,
	0x24, 0x9a, 0x8e, 0xef, 0x0c, 0x28, 0xfc, 0x5a, 0x02, 0x6a, 0xe4, 0x30, 0x76, 0xc7, 0xc7, 0x4e,
	0x40, 0x3c, 0xd7, 0xbe, 0x8f, 0xb1, 0x2a, 0xe5, 0x97, 0x36, 0x53, 0x97, 0xcf, 0xe8, 0x62, 0x4f,
	0x76, 0x40, 0x5d, 0x1c, 0x50, 0xaf, 0x78, 0xc4, 0x2d, 0x5f, 0x7c, 0xfa, 0x3c, 0x17, 0xfb, 0xfe,
	0x45, 0x6e, 0xb3, 0x4b, 0x82, 0xde, 0xa8, 0xad, 0x77, 0xbc, 0x81, 0x38, 0xa0, 0xf8, 0x73, 0x81,
	0xa2, 0x07, 0xc5, 0x60, 0x67, 0x88, 0x29, 0x07, 0x50, 0x33, 0x13, 0xd9, 0xac, 0x22, 0xf6, 0xaa,
	0x61, 0x0c, 0xcf, 0x81, 0x75, 0xbc, 0xcd, 0x09, 0x42, 0xf6, 0x10, 0xfb, 0xc4, 0x43, 0x6a, 0x3c,
	0x2f, 0x6d, 0xae, 0x99, 0xe9, 0xa9, 0xbb, 0xc9, 0xbd, 0xd7, 0x93, 0xdf, 0xee, 0xe6, 0x62, 0x7f,
	0xee, 0xe6, 0xa4, 0xc2, 0x6e, 0x02, 0xa4, 0xca, 0x0e, 0xc5, 0xa5, 0x51, 0x87, 0x65, 0x81, 0x69,
	0x10, 0x27, 0x48, 0x95, 0xf2, 0xd2, 0xa6, 0x6c, 0xc6, 0x09, 0x82, 0x57, 0x81, 0xcc, 0x76, 0xe6,
	0x79, 0xd2, 0x97, 0xdf, 0xd5, 0x0f, 0xa7, 0x5f, 0x17, 0xf0, 0xd6, 0xce, 0x10, 0x9b, 0x1c, 0x00,
	0xb3, 0x00, 0x38, 0xa1, 0x13, 0x63, 0x5f, 0x5d, 0xca, 0x4b, 0x9b, 0x2b, 0x66, 0xc4, 0x03, 0x2f,
	0x82, 0x0d, 0x8a, 0xfb, 0x7d, 0x46, 0xd7, 0xd0, 0xf3, 0xfa, 0xb6, 0x83, 0x90, 0x8f, 0x29, 0x55,
	0x65, 0x1e, 0x09, 0xc5, 0x5a, 0xd3, 0xf3, 0xfa, 0xa5, 0x70, 0x05, 0xea, 0xe0, 0x7f, 0x43, 0x67,
	0xe7, 0x25, 0xc0, 0x32, 0x07, 0x9c, 0x0e, 0x97, 0xa2, 0xf1, 0xb7, 0x40, 0x8a, 0x06, 0x8e, 0x1f,
	0xd8, 0x43, 0x9f, 0x74, 0xb0, 0x9a, 0x60, 0x71, 0x65, 0x9d, 0x91, 0xfd, 0xfb, 0xf3, 0xdc, 0xfb,
	0xaf, 0x41, 0x76, 0x15, 0x77, 0x4c, 0xc0, 0x53, 0x34, 0x59, 0x06, 0x38, 0x00, 0xab, 0xd3, 0x23,
	0xb3, 0xce, 0x52, 0x4f, 0xe5, 0xa5, 0x7f, 0xaf, 0x6c, 0x51, 0x54, 0xf6, 0xdc, 0x6b, 0x56, 0xd6,
	0x4c, 0x89, 0xfc, 0xcc, 0x80, 0xe7, 0x81, 0xb8, 0x14, 0xdf, 0xcd, 0x46, 0xd8, 0xf5, 0x06, 0x6a,
	0x92, 0xdf, 0x76, 0x3d, 0x5c, 0x60, 0x61, 0x55, 0xe6, 0x66, 0x95, 0x7f, 0x88, 0x69, 0xc0, 0x82,
	0xa7, 0xbc, 0xac, 0xf0, 0xc8, 0xb4, 0x70, 0x4f, 0x49, 0xb9, 0x07, 0x4e, 0x4f, 0x03, 0x69, 0xa7,
	0x87, 0xd1, 0xa8, 0x8f, 0xa9, 0x0a, 0x78, 0x8b, 0x9e, 0x7b, 0x55, 0x71, 0xef, 0x84, 0x00, 0x4b,
	0xc4, 0x97, 0x65, 0x76, 0x2d, 0x53, 0x79, 0xb8, 0xe8, 0xa6, 0xb0, 0x02, 0x42, 0xb6, 0x6c, 0x26,
	0x15, 0x35, 0xc5, 0xd9, 0xd1, 0xf4, 0x50, 0x47, 0xfa, 0x54, 0x47, 0x7a, 0x6b, 0xaa, 0xa3, 0x72,
	0x92, 0xe5, 0x79, 0xf2, 0x22, 0x27, 0x99, 0x2b, 0x1c, 0xc7, 0x56, 0xe0, 0x27, 0x20, 0x89, 0x5d,
	0x14, 0xa6, 0x58, 0x3d, 0x46, 0x8a, 0x53, 0xd8, 0x45, 0x3c, 0xc1, 0xc7, 0x20, 0x41, 0x03, 0x27,
	0x18, 0x51, 0x75, 0x8d, 0xf7, 0xec, 0x7b, 0x47, 0xf4, 0xac, 0xc5, 0x83, 0x4d, 0x01, 0xba, 0xae,
	0x3c, 0xde, 0xcd, 0xc5, 0x7e, 0xfd, 0xf9, 0x42, 0x52, 0x2c, 0xd7, 0x0b, 0x5d, 0x70, 0xba, 0x46,
	0xb6, 0x31, 0xe2, 0x4d, 0x30, 0xd5, 0xc9, 0x16, 0x58, 0x65, 0xf5, 0xb6, 0x45, 0x47, 0x73, 0xc5,
	0xa4, 0x5e, 0xad, 0x8f, 0x88, 0xc4, 0xca, 0xf2, 0xb3, 0xe7, 0x39, 0xc9, 0x4c, 0xb5, 0xe7, 0xae,
	0xeb, 0x32, 0xdb, 0xb4, 0xf0, 0x43, 0x1c, 0xa4, 0x0d, 0xb7, 0xdb, 0x27, 0xb4, 0xf7, 0x56, 0xb6,
	0x61, 0xc5, 0x1f, 0x38, 0xdb, 0x64, 0x30, 0x1a, 0xd8, 0x6d, 0x82, 0x84, 0x2e, 0xe2, 0x27, 0xd2,
	0xc5, 0xba, 0x48, 0x54, 0x26, 0x21, 0x2f, 0x50, 0x03, 0xc9, 0xe9, 0x90, 0xe1, 0x6a, 0x5f, 0x33,
	0x67, 0x36, 0x53, 0x62, 0xf8, 0x6d, 0xfb, 0x4e, 0x80, 0x43, 0x89, 0x1f, 0x5f, 0x89, 0x61, 0x0a,
	0xd3, 0x09, 0xb0, 0xe0, 0xeb, 0x6f, 0x09, 0xac, 0x8b, 0xab, 0x7d, 0x8a, 0x03, 0x07, 0x39, 0x81,
	0x03, 0xcf, 0xce, 0xc6, 0x8e, 0x3d, 0x9b, 0x63, 0x2b, 0xc2, 0x53, 0x47, 0xd0, 0x02, 0x6b, 0x8f,
	0x88, 0xeb, 0xf2, 0x21, 0xf2, 0x1f, 0x6e, 0xbf, 0x2a, 0x92, 0x84, 0x57, 0xdf, 0x06, 0x30, 0xf0,
	0x02, 0xa7, 0x6f, 0x2f, 0x4c, 0x87, 0xa5, 0x37, 0x3e, 0x1d, 0x14, 0xbe, 0x8b, 0x35, 0x1f, 0x11,
	0x85, 0x6f, 0x24, 0xb0, 0x7e, 0x40, 0x9d, 0xf0, 0x1a, 0x90, 0xb9, 0x78, 0xa4, 0x63, 0x88, 0x87,
	0x23, 0x60, 0x0d, 0x24, 0x1e, 0x61, 0xd2, 0xed, 0x05, 0x27, 0x64, 0x45, 0xa0, 0x0b, 0x7f, 0x49,
	0x60, 0x55, 0x9c, 0xea, 0xb3, 0x11, 0x1e, 0xe1, 0xa3, 0x8a, 0xb2, 0xf8, 0x54, 0xc4, 0x5f, 0x7a,
	0x2a, 0x1e, 0x80, 0x54, 0x64, 0x10, 0xbe, 0x05, 0x62, 0xc1, 0x7c, 0x9c, 0xce, 0xe8, 0x93, 0x8f,
	0x4b, 0x5f, 0xe1, 0xa7, 0x38, 0x58, 0x2a, 0x13, 0x74, 0xd4, 0x6d, 0x35, 0x90, 0xa4, 0xf8, 0xab,
	0x11, 0x76, 0x45, 0xf7, 0xc9, 0xe6, 0xcc, 0x86, 0x19, 0x90, 0x68, 0x13, 0x84, 0x66, 0x0f, 0xa6,
	0xb0, 0x60, 0x15, 0x2c, 0x87, 0xed, 0x7a, 0x32, 0xe9, 0x84, 0x60, 0xf8, 0x25, 0x90, 0x39, 0x81,
	0xcb, 0x6f, 0x9c, 0x40, 0x9e, 0x97, 0x9d, 0xbe, 0x17, 0xf6, 0x4f, 0x82, 0xdf, 0x4b, 0x58, 0xec,
	0xc6, 0x84, 0x7e, 0x4e, 0x5c, 0x17, 0xfb, 0xfc, 0xcd, 0x4c, 0x9a, 0x33, 0xfb, 0xfc, 0x8f, 0x12,
	0x48, 0x45, 0x7e, 0x3c, 0xc0, 0x8b, 0x40, 0x2d, 0xdd, 0xae, 0xb4, 0xea, 0xb7, 0x1a, 0x76, 0xeb,
	0x6e, 0xd3, 0xb0, 0x6f, 0x37, 0xac, 0xa6, 0x51, 0xa9, 0xd7, 0xea, 0x46, 0x55, 0x89, 0x69, 0x70,
	0x3c, 0xc9, 0xa7, 0x23, 0xe1, 0x0d, 0xd2, 0x87, 0x57, 0x0f, 0x20, 0x6a, 0xf5, 0x2f, 0x8c, 0xaa,
	0xdd, 0x34, 0xeb, 0x15, 0x43, 0x91, 0xb4, 0x33, 0xe3, 0x49, 0xfe, 0xff, 0x11, 0xc4, 0x7c, 0x92,
	0xb3, 0x5f, 0x20, 0x0b, 0x40, 0xa3, 0x71, 0x63, 0xab, 0x6e, 0xdd, 0x54, 0xe2, 0x5a, 0x66, 0x3c,
	0xc9, 0xc3, 0x08, 0x48, 0x0c, 0x65, 0x4d, 0x7e, 0xfc, 0x5d, 0x36, 0x76, 0xfe, 0x45, 0x1c, 0xac,
	0x2d, 0xbc, 0x1d, 0xf0, 0x0a, 0xd0, 0xa6, 0x99, 0xac, 0x56, 0xa9, 0x75, 0xdb, 0x3a, 0x70, 0xec,
	0x8d, 0xf1, 0x24, 0xaf, 0x2c, 0x40, 0xd8, 0xc1, 0xaf, 0x80, 0xcc, 0x01, 0x94, 0xd5, 0x2a, 0x35,
	0xaa, 0xe5, 0xbb, 0x8a, 0xa4, 0xa9, 0xe3, 0x49, 0x7e, 0x63, 0x01, 0x61, 0x05, 0x8e, 0x8b, 0xca,
	0x3b, 0x87, 0xa3, 0xcc, 0x96, 0x51, 0x55, 0xe2, 0x87, 0xa3, 0xfc, 0x00, 0xa3, 0x43, 0x50, 0x77,
	0x0c, 0xab, 0x55, 0x6f, 0xdc, 0x50, 0x96, 0x0e, 0x41, 0x09, 0xf1, 0xc2, 0x8f, 0xc0, 0x3b, 0x07,
	0x50, 0xb5, 0x7a, 0xa3, 0x6e, 0xdd, 0x34, 0xaa, 0x8a, 0xbc, 0xc0, 0x6c, 0x08, 0xab, 0x11, 0x97,
	0xd0, 0x1e, 0x46, 0xf0, 0xda, 0xbc, 0x24, 0x02, 0x57, 0x29, 0x35, 0x2a, 0xc6, 0xd6, 0x96, 0x51,
	0x55, 0x96, 0x35, 0x6d, 0x3c, 0xc9, 0x67, 0x16, 0x80, 0x15, 0xc7, 0xed, 0xe0, 0x7e, 0x1f, 0xa3,
	0x90, 0xe1, 0xf2, 0xad, 0xa7, 0x7b, 0x59, 0xe9, 0xd9, 0x5e, 0x56, 0xfa, 0x63, 0x2f, 0x2b, 0x3d,
	0xd9, 0xcf, 0xc6, 0x9e, 0xed, 0x67, 0x63, 0xbf, 0xed, 0x67, 0x63, 0xf7, 0x3e, 0x8c, 0x74, 0xe4,
	0xfc, 0x0d, 0x8c, 0xfe, 0x9f, 0x50, 0xdc, 0x5e, 0xb0, 0x78, 0x93, 0xb6, 0x13, 0x5c, 0xbe, 0x1f,
	0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x64, 0x0f, 0x84, 0xac, 0x5d, 0x0c, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FundraisingCreationFee) != len(that1.FundraisingCreationFee) {
		return false
	}
	for i := range this.FundraisingCreationFee {
		if !this.FundraisingCreationFee[i].Equal(&that1.FundraisingCreationFee[i]) {
			return false
		}
	}
	if this.ExtendedPeriod != that1.ExtendedPeriod {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPeriod != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.ExtendedPeriod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FundraisingCreationFee) > 0 {
		for iNdEx := len(m.FundraisingCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FundraisingCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFundraising(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BaseAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintFundraising(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x62
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintFundraising(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5a
	if len(m.VestingSchedules) > 0 {
		for iNdEx := len(m.VestingSchedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingSchedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFundraising(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.VestingAddress) > 0 {
		i -= len(m.VestingAddress)
		copy(dAtA[i:], m.VestingAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.VestingAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PayingCoinDenom) > 0 {
		i -= len(m.PayingCoinDenom)
		copy(dAtA[i:], m.PayingCoinDenom)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.PayingCoinDenom)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.SellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StartPrice.Size()
		i -= size
		if _, err := m.StartPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.PayingPoolAddress) > 0 {
		i -= len(m.PayingPoolAddress)
		copy(dAtA[i:], m.PayingPoolAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.PayingPoolAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SellingPoolAddress) > 0 {
		i -= len(m.SellingPoolAddress)
		copy(dAtA[i:], m.SellingPoolAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.SellingPoolAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixedPriceAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedPriceAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedPriceAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseAuction != nil {
		{
			size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFundraising(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnglishAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnglishAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnglishAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExtendRate.Size()
		i -= size
		if _, err := m.ExtendRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Extended != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Extended))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MaximumBidPrice.Size()
		i -= size
		if _, err := m.MaximumBidPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BaseAuction != nil {
		{
			size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFundraising(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuctionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalSellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.WinningPrice.Size()
		i -= size
		if _, err := m.WinningPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VestingSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintFundraising(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VestingQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintFundraising(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.PayingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWinner {
		i--
		if m.IsWinner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Height != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.AuctionId != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFundraising(dAtA []byte, offset int, v uint64) int {
	offset -= sovFundraising(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FundraisingCreationFee) > 0 {
		for _, e := range m.FundraisingCreationFee {
			l = e.Size()
			n += 1 + l + sovFundraising(uint64(l))
		}
	}
	if m.ExtendedPeriod != 0 {
		n += 1 + sovFundraising(uint64(m.ExtendedPeriod))
	}
	return n
}

func (m *BaseAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFundraising(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovFundraising(uint64(m.Type))
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = len(m.SellingPoolAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = len(m.PayingPoolAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.StartPrice.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = m.SellingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = len(m.PayingCoinDenom)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = len(m.VestingAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	if len(m.VestingSchedules) > 0 {
		for _, e := range m.VestingSchedules {
			l = e.Size()
			n += 1 + l + sovFundraising(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFundraising(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovFundraising(uint64(l))
	if m.Status != 0 {
		n += 1 + sovFundraising(uint64(m.Status))
	}
	return n
}

func (m *FixedPriceAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAuction != nil {
		l = m.BaseAuction.Size()
		n += 1 + l + sovFundraising(uint64(l))
	}
	return n
}

func (m *EnglishAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAuction != nil {
		l = m.BaseAuction.Size()
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.MaximumBidPrice.Size()
	n += 1 + l + sovFundraising(uint64(l))
	if m.Extended != 0 {
		n += 1 + sovFundraising(uint64(m.Extended))
	}
	l = m.ExtendRate.Size()
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *AuctionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovFundraising(uint64(m.AuctionId))
	}
	l = m.WinningPrice.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = m.TotalSellingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *VestingSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovFundraising(uint64(l))
	l = m.Weight.Size()
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *VestingQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovFundraising(uint64(m.AuctionId))
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.PayingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovFundraising(uint64(m.AuctionId))
	}
	if m.Sequence != 0 {
		n += 1 + sovFundraising(uint64(m.Sequence))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = m.Coin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	if m.Height != 0 {
		n += 1 + sovFundraising(uint64(m.Height))
	}
	if m.IsWinner {
		n += 2
	}
	return n
}

func sovFundraising(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFundraising(x uint64) (n int) {
	return sovFundraising(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundraisingCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundraisingCreationFee = append(m.FundraisingCreationFee, types.Coin{})
			if err := m.FundraisingCreationFee[len(m.FundraisingCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPeriod", wireType)
			}
			m.ExtendedPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuctionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingSchedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingSchedules = append(m.VestingSchedules, VestingSchedule{})
			if err := m.VestingSchedules[len(m.VestingSchedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedPriceAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedPriceAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedPriceAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAuction == nil {
				m.BaseAuction = &BaseAuction{}
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnglishAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnglishAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnglishAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAuction == nil {
				m.BaseAuction = &BaseAuction{}
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumBidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumBidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extended", wireType)
			}
			m.Extended = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extended |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtendRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WinningPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWinner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWinner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFundraising(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFundraising
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFundraising
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFundraising
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFundraising        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFundraising          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFundraising = fmt.Errorf("proto: unexpected end of group")
)
